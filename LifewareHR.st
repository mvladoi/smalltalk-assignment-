Object subclass: #Car	instanceVariableNames: 'price rentedIntervals'	classVariableNames: ''	poolDictionaries: ''	category: 'LifewareHR-Core'!!Car commentStamp: 'VincentBlondeau 3/25/2019 10:12' prior: 0!exercises.!!Car methodsFor: 'testing' stamp: 'MarianVladoi 3/26/2021 10:49'!isRentedFromDate: aDate numberOfDays: anInteger   |result rentedUntil|     rentedIntervals isEmpty          ifTrue: [ ^ false].      rentedUntil := aDate addDays: anInteger.	result := (rentedIntervals select: [ :each | aDate <= (each at:2) and: [ rentedUntil >= (each at:1) ]]) size.		(result > 0)       ifTrue:  [ ^ true]       ifFalse: [ ^ false].		! !!Car methodsFor: 'accessor' stamp: 'MarianVladoi 3/25/2021 23:58'!putInterval: aCollection	rentedIntervals add: aCollection.! !!Car methodsFor: 'accessor' stamp: 'LWhr 3/28/2017 14:47'!price	^ price! !!Car methodsFor: 'accessor' stamp: 'LWhr 3/28/2017 14:49'!price: aPrice	price := aPrice! !!Car methodsFor: 'initialization' stamp: 'MarianVladoi 3/25/2021 23:51'!setRentedIntervals: aCollection  rentedIntervals := aCollection. 	! !!Car methodsFor: 'initialization' stamp: 'LWhr 3/28/2017 14:48'!setPrice: aPrice	price := aPrice! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Car class	instanceVariableNames: ''!!Car class methodsFor: 'instance creation' stamp: 'LWhr 3/28/2017 15:17'!golf	^ self price: 100! !!Car class methodsFor: 'instance creation' stamp: 'LWhr 3/28/2017 14:51'!tesla	^ self price: 400! !!Car class methodsFor: 'instance creation' stamp: 'LWhr 3/28/2017 14:50'!panda	^ self price: 50! !!Car class methodsFor: 'instance creation' stamp: 'LWhr 3/28/2017 14:48'!price: aPrice	^ self new setPrice: aPrice! !Object subclass: #CarRental	instanceVariableNames: 'cars'	classVariableNames: ''	poolDictionaries: ''	category: 'LifewareHR-Core'!!CarRental commentStamp: 'VincentBlondeau 3/25/2019 10:12' prior: 0!commentStamp: 'LWhr 3/28/2017 14:51' prior: 0!!CarRental methodsFor: 'initialization' stamp: 'MarianVladoi 3/24/2021 21:28'!initialize	cars := OrderedCollection new.! !!CarRental methodsFor: 'accessing' stamp: 'MarianVladoi 3/26/2021 10:40'!rentedCarsFromDate: aDate numberOfDays: anInteger ^ (cars select: [:each | each isRentedFromDate: aDate numberOfDays: anInteger]).  ! !!CarRental methodsFor: 'accessing' stamp: 'MarianVladoi 3/24/2021 21:26'!numberOfCars  ^ cars size! !!CarRental methodsFor: 'accessing' stamp: 'MarianVladoi 3/26/2021 10:40'!availableCarsFromDate: aDate numberOfDays: anInteger ^ (cars reject: [:each | each isRentedFromDate: aDate numberOfDays: anInteger ]) . ! !!CarRental methodsFor: 'adding' stamp: 'MarianVladoi 3/25/2021 23:52'!addCar: aCar      cars add: (aCar setRentedIntervals: OrderedCollection new). 	! !!CarRental methodsFor: 'action' stamp: 'MarianVladoi 3/25/2021 23:34'!rent: aCar fromDate: aDate days: anInteger | interval | interval:= nil. (cars includes: aCar) 	ifTrue: [ 				(aCar isRentedFromDate: aDate numberOfDays: anInteger)					ifTrue: [ ^ false]					ifFalse: [  								  interval := OrderedCollection new.						        interval add: aDate. 								  interval add: (aDate addDays: anInteger).									  aCar putInterval: interval.   						        ^ true.						      ]		      		       ]   ifFalse:[^ false].    	 	 ! !!CarRental methodsFor: 'action' stamp: 'MarianVladoi 3/24/2021 14:31'!priceFor: aCar days: anInteger	| price |	price := aCar price * anInteger.	^ price	! !!CarRental methodsFor: 'action' stamp: 'MarianVladoi 3/24/2021 22:35'!rent: aCar days: anInteger    |todayDate|		todayDate := Date today.	aCar isRented: true.	aCar rentedFrom: todayDate.	aCar rentedUntil: (todayDate addDays: anInteger).		cars add: aCar.     	 	 ! !TestCase subclass: #CarRentalTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'LifewareHR-Tests'!!CarRentalTest commentStamp: 'VincentBlondeau 3/25/2019 10:13' prior: 0!'<historical>' prior: 0!!CarRentalTest methodsFor: '1.1 examples ' stamp: 'VincentBlondeau 3/22/2019 14:42'!testBooleanCondition	| counter |	counter := OrderedCollection new.	1 > 0		ifTrue: [ counter add: 1 ]		ifFalse: [ counter add: 2 ].	self assert: counter first equals: 1! !!CarRentalTest methodsFor: '1 warming up exercise' stamp: 'MarianVladoi 3/23/2021 23:31'!testTeslaPrice	"to be completed"   | tesla |	tesla := Car tesla.	self assert: tesla price equals: 400! !!CarRentalTest methodsFor: '1 warming up exercise' stamp: 'MarianVladoi 3/23/2021 23:35'!testRentTesla	"to be completed"	| carRental  myTesla |	carRental := CarRental new.	myTesla := Car tesla.	self assert: (carRental priceFor: myTesla days: 3) equals: 1200	! !!CarRentalTest methodsFor: '4 exercise' stamp: 'MarianVladoi 3/26/2021 11:15'!testRentingWithDates	"Extend the code and write a test for the following scenario: Our car rentals has 3, 2 tesla and 1 golf. Customer Bob call our service asking for a golf for 5 days starting on the 1st of April. Unfortunately the golf is already rented up to the 3rd of april. Our service tells Bob that we have two available teslas, and that they can provide an individual discount of 10 euros per day. Our informatic system should offer the functionalities to sustain the above scenario, for example it should know whether the panda is free in the requested period and so on...write test case(s) and code to simulate this scenario"	| carRental redTesla yellowTesla blackGolf rentDateGolf numDays rentDateRedTeslsa availableCars|		carRental := CarRental new.	"create the cars"	redTesla := Car tesla.	yellowTesla := Car tesla.	blackGolf := Car golf.	"add the cars to renting company"	carRental		addCar: redTesla;		addCar: yellowTesla;		addCar: blackGolf.	"test if there are 3 cars available"		self assert: (carRental availableCarsFromDate: Date today numberOfDays: 1) size equals: 3.		"rent two of the cars: blackGold (3-Apr-2021 to 8-Apr-2021) and redTesla (3-May-2021 to 8-May-2021)"	rentDateGolf := Date newDay: 3 month: 'Apr' year: 2021.	numDays:= 5.	carRental rent: blackGolf fromDate: rentDateGolf  days: numDays .		rentDateRedTeslsa := Date newDay: 3 month: 'May' year: 2021.	numDays:= 5.	carRental rent: redTesla fromDate: rentDateRedTeslsa   days: numDays .		"test how many care available to be rented today for one day"	self assert: (carRental availableCarsFromDate: Date today numberOfDays: 1) size equals: 3.	"test how many available cars for the next 60 days period "	self assert: (carRental availableCarsFromDate: Date today numberOfDays: 60) size equals: 1.	"test how many rented cars for the next 60 days period"	self assert: (carRental rentedCarsFromDate: Date today numberOfDays: 60) size equals: 2.		availableCars:= (carRental availableCarsFromDate: rentDateGolf numberOfDays: 5).	"test how many available cars for 3-Apr-2021 to 8-Apr-2021)   "	self assert: (carRental availableCarsFromDate: rentDateGolf numberOfDays: 5) size equals: 2.	"test if Golf car is available"	self assert: (availableCars includes: blackGolf) not.	"test if we have 2 Tesla for rent"	self assert: (carRental availableCarsFromDate: rentDateGolf numberOfDays: 5) size equals: 2.	self assert: (availableCars includes: redTesla ).	self assert: (availableCars includes: yellowTesla ).		(availableCars includes: blackGolf)			ifTrue:  [ Transcript show: 'You can rent the blackGolf for the period (3-Apr-2021 to 8-Apr-2021)'; cr. ]			ifFalse: [ Transcript show: 'The blackGolf is not available for the period (3-Apr-2021 to 8-Apr-2021)'; cr. 				        Transcript show: 'However we have two available teslas with an individual discount of 10 euros per day'; cr.                               ]					! !!CarRentalTest methodsFor: '0 examples' stamp: 'VincentBlondeau 3/22/2019 14:42'!testPandaPrice	| panda |	panda := Car panda.	self assert: panda price equals: 50! !!CarRentalTest methodsFor: '0 examples' stamp: 'VincentBlondeau 3/22/2019 14:42'!testRentPanda	| carRental myPanda |	carRental := CarRental new.	myPanda := Car panda.	self assert: (carRental priceFor: myPanda days: 3) equals: 150! !!CarRentalTest methodsFor: '2 exercise' stamp: 'MarianVladoi 3/23/2021 23:19'!testDiscountedPrice	"Starting from the 4th day, the customer gets a rebate of 10% on the daily rate"	"extend the code to make this test green"	| carRental myGolf totalDays fullPriceDays discountedPriceDays pricePerDay rebate discountAmount  |		carRental := CarRental new.	myGolf := Car golf.		totalDays := 4. 	fullPriceDays := 3. 	discountedPriceDays := totalDays - fullPriceDays. 	pricePerDay := carRental priceFor: myGolf days: 1.	rebate := 0.1 .	discountAmount := discountedPriceDays * (rebate * pricePerDay ).		self assert: (carRental priceFor: myGolf days: totalDays) - discountAmount equals: 390! !!CarRentalTest methodsFor: '3 exercise' stamp: 'MarianVladoi 3/26/2021 10:41'!testRenting	"The same car cannot be rented twice. Extend the code to make this test green: define the missing (red) methods in the class CarRental"	| carRental redPanda yellowPanda blackTesla |	carRental := CarRental new.	redPanda := Car panda.	yellowPanda := Car panda.	blackTesla := Car tesla.	carRental		addCar: redPanda;		addCar: yellowPanda;		addCar: blackTesla.			self assert: (carRental availableCarsFromDate: Date today numberOfDays: 1) size equals: 3.	carRental rent: redPanda fromDate: Date today  days: 5.	self assert: (carRental availableCarsFromDate: Date today numberOfDays: 1) size equals: 2.	self assert: (carRental rentedCarsFromDate: Date today numberOfDays: 1) size equals: 1! !!CarRentalTest methodsFor: '3 exercise' stamp: 'MarianVladoi 3/24/2021 21:26'!testFixedNumberOfCars	"Our car rental has now a fixed number of cars. Extend the code to make this test green: define the missing (red) methods in the class CarRental"	| carRental |	carRental := CarRental new.	carRental		addCar: Car panda;		addCar: Car panda;		addCar: Car tesla.	self assert: carRental numberOfCars equals: 3! !